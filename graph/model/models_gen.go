// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AllowsResult interface {
	IsAllowsResult()
}

type ChatResult interface {
	IsChatResult()
}

type ChatRolesResult interface {
	IsChatRolesResult()
}

type ChatsResult interface {
	IsChatsResult()
}

type CountMembersResult interface {
	IsCountMembersResult()
}

type EventResult interface {
	IsEventResult()
}

type InviteInfoResult interface {
	IsInviteInfoResult()
}

type InvitesResult interface {
	IsInvitesResult()
}

type JoinByInviteResult interface {
	IsJoinByInviteResult()
}

type JoinToChatResult interface {
	IsJoinToChatResult()
}

type LoginResult interface {
	IsLoginResult()
}

type MeResult interface {
	IsMeResult()
}

type MemberResult interface {
	IsMemberResult()
}

type MembersResult interface {
	IsMembersResult()
}

type MessageResult interface {
	IsMessageResult()
}

type MessagesResult interface {
	IsMessagesResult()
}

type MsgBody interface {
	IsMsgBody()
}

type MutationResult interface {
	IsMutationResult()
}

type NewRoomMessageSubscription interface {
	IsNewRoomMessageSubscription()
}

type RefreshTokensResult interface {
	IsRefreshTokensResult()
}

type RegisterResult interface {
	IsRegisterResult()
}

type RoleResult interface {
	IsRoleResult()
}

type RolesResult interface {
	IsRolesResult()
}

type RoomFormResult interface {
	IsRoomFormResult()
}

type RoomResult interface {
	IsRoomResult()
}

type RoomsResult interface {
	IsRoomsResult()
}

type SendMessageToRoomResult interface {
	IsSendMessageToRoomResult()
}

type UnionScalar interface {
	IsUnionScalar()
}

type UnitResult interface {
	IsUnitResult()
}

type UnitsResult interface {
	IsUnitsResult()
}

type UserResult interface {
	IsUserResult()
}

type UserRoleResult interface {
	IsUserRoleResult()
}

type UsersResult interface {
	IsUsersResult()
}

type AdvancedError struct {
	Code  string `json:"code"`
	Error string `json:"error"`
}

func (AdvancedError) IsMutationResult()             {}
func (AdvancedError) IsUserResult()                 {}
func (AdvancedError) IsRoomsResult()                {}
func (AdvancedError) IsCountMembersResult()         {}
func (AdvancedError) IsMembersResult()              {}
func (AdvancedError) IsRolesResult()                {}
func (AdvancedError) IsInvitesResult()              {}
func (AdvancedError) IsUsersResult()                {}
func (AdvancedError) IsChatResult()                 {}
func (AdvancedError) IsRoleResult()                 {}
func (AdvancedError) IsMemberResult()               {}
func (AdvancedError) IsAllowsResult()               {}
func (AdvancedError) IsJoinByInviteResult()         {}
func (AdvancedError) IsJoinToChatResult()           {}
func (AdvancedError) IsLoginResult()                {}
func (AdvancedError) IsRefreshTokensResult()        {}
func (AdvancedError) IsRegisterResult()             {}
func (AdvancedError) IsSendMessageToRoomResult()    {}
func (AdvancedError) IsChatRolesResult()            {}
func (AdvancedError) IsChatsResult()                {}
func (AdvancedError) IsInviteInfoResult()           {}
func (AdvancedError) IsMeResult()                   {}
func (AdvancedError) IsMessageResult()              {}
func (AdvancedError) IsRoomFormResult()             {}
func (AdvancedError) IsMessagesResult()             {}
func (AdvancedError) IsRoomResult()                 {}
func (AdvancedError) IsUnitResult()                 {}
func (AdvancedError) IsUnitsResult()                {}
func (AdvancedError) IsUserRoleResult()             {}
func (AdvancedError) IsNewRoomMessageSubscription() {}

type Allow struct {
	Action AllowAction `json:"action"`
	Group  AllowGroup  `json:"group"`
	Value  string      `json:"value"`
}

type AllowInput struct {
	Action AllowAction `json:"action"`
	Group  AllowGroup  `json:"group"`
	Value  string      `json:"value"`
}

type Allows struct {
	Room   *Room    `json:"room"`
	Allows []*Allow `json:"allows"`
}

func (Allows) IsAllowsResult() {}

type AllowsInput struct {
	Allows []*AllowInput `json:"allows"`
}

type BoolValueInput struct {
	Value bool `json:"value"`
}

type Case struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Chars struct {
	Chars []CharType `json:"chars"`
}

type Chat struct {
	Unit         *Unit              `json:"unit"`
	Owner        UserResult         `json:"owner"`
	Rooms        RoomsResult        `json:"rooms"`
	Private      bool               `json:"private"`
	CountMembers CountMembersResult `json:"countMembers"`
	Members      MembersResult      `json:"members"`
	Roles        RolesResult        `json:"roles"`
	Invites      InvitesResult      `json:"invites"`
	Banlist      UsersResult        `json:"banlist"`
	Me           MemberResult       `json:"me"`
}

func (Chat) IsChatResult() {}

type Chats struct {
	Chats []*Chat `json:"chats"`
}

func (Chats) IsChatsResult() {}

type CreateChatInput struct {
	Domain  string `json:"domain"`
	Name    string `json:"name"`
	Private bool   `json:"private"`
}

type CreateInviteInput struct {
	ChatID   int    `json:"chatId"`
	Code     string `json:"code"`
	Aliens   *int   `json:"aliens"`
	Duration *int64 `json:"duration"`
}

type CreateMessageInput struct {
	ReplyTo *int   `json:"replyTo"`
	Body    string `json:"body"`
}

type CreateRoleInput struct {
	ChatID int      `json:"chatId"`
	Name   string   `json:"name"`
	Color  HexColor `json:"color"`
}

type CreateRoomInput struct {
	ChatID int              `json:"chatId"`
	Name   string           `json:"name"`
	Parent *int             `json:"parent"`
	Note   *string          `json:"note"`
	Form   *UpdateFormInput `json:"form"`
	Allows *AllowsInput     `json:"allows"`
}

type FindChats struct {
	ID           *int    `json:"id"`
	Domain       *string `json:"domain"`
	NameFragment *string `json:"nameFragment"`
}

type FindMembers struct {
	ChatID   int       `json:"chatId"`
	UserID   *int      `json:"userId"`
	MemberID *int      `json:"memberId"`
	Char     *CharType `json:"char"`
	RoleID   *int      `json:"roleId"`
	Muted    *bool     `json:"muted"`
	Frozen   *bool     `json:"frozen"`
}

type FindMessages struct {
	ChatID       int     `json:"chatId"`
	RoomID       *int    `json:"roomId"`
	AuthorID     *int    `json:"authorId"`
	TextFragment *string `json:"textFragment"`
}

type FindMessagesInRoomByUnionInput struct {
	AfterTime  *int64 `json:"afterTime"`
	BeforeTime *int64 `json:"beforeTime"`
}

type FindRooms struct {
	ChatID       int        `json:"chatId"`
	RoomID       *int       `json:"roomId"`
	NameFragment *string    `json:"nameFragment"`
	ParentID     *int       `json:"parentId"`
	IsChild      *FetchType `json:"isChild"`
}

type FindUnits struct {
	ID           *int      `json:"id"`
	Domain       *string   `json:"domain"`
	NameFragment *string   `json:"nameFragment"`
	UnitType     *UnitType `json:"unitType"`
}

type FindUsers struct {
	ID           *int    `json:"id"`
	Domain       *string `json:"domain"`
	NameFragment *string `json:"nameFragment"`
}

type Form struct {
	Fields []*FormField `json:"fields"`
}

func (Form) IsRoomFormResult() {}

type FormField struct {
	Key      string    `json:"key"`
	Type     FieldType `json:"type"`
	Optional bool      `json:"optional"`
	Length   *int      `json:"length"`
	Items    []string  `json:"items"`
}

type FormFieldInput struct {
	Key      string    `json:"key"`
	Type     FieldType `json:"type"`
	Optional bool      `json:"optional"`
	Length   *int      `json:"length"`
	Items    []string  `json:"items"`
}

type IntValue struct {
	Value *int `json:"value"`
}

func (IntValue) IsUnionScalar()        {}
func (IntValue) IsCountMembersResult() {}

type Invite struct {
	Code      string `json:"code"`
	Aliens    *int   `json:"aliens"`
	ExpiresAt *int64 `json:"expires_at"`
}

type InviteInfo struct {
	Unit         *Unit              `json:"unit"`
	Private      bool               `json:"private"`
	CountMembers CountMembersResult `json:"countMembers"`
}

func (InviteInfo) IsInviteInfoResult() {}

type Invites struct {
	Invites []*Invite `json:"invites"`
}

func (Invites) IsInvitesResult() {}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Me struct {
	User       *User     `json:"user"`
	Data       *UserData `json:"data"`
	Chats      *Chats    `json:"chats"`
	OwnedChats *Chats    `json:"ownedChats"`
}

func (Me) IsMeResult() {}

type Member struct {
	ID       int        `json:"id"`
	Chat     *Chat      `json:"chat"`
	User     *User      `json:"user"`
	Role     RoleResult `json:"role"`
	Char     CharType   `json:"char"`
	JoinedAt int64      `json:"joinedAt"`
	Muted    bool       `json:"muted"`
	Frozen   bool       `json:"frozen"`
}

func (Member) IsMemberResult() {}

type Members struct {
	Members []*Member `json:"members"`
}

func (Members) IsMembersResult() {}

type Message struct {
	ID        int         `json:"id"`
	Room      *Room       `json:"room"`
	ReplyTo   *Message    `json:"replyTo"`
	Author    *Member     `json:"author"`
	Body      string      `json:"body"`
	Type      MessageType `json:"type"`
	CreatedAt int64       `json:"createdAt"`
}

func (Message) IsMessageResult()              {}
func (Message) IsNewRoomMessageSubscription() {}

type Messages struct {
	Messages []*Message `json:"messages"`
}

func (Messages) IsMessagesResult() {}

type NewMessage struct {
	ID        int         `json:"id"`
	RoomID    int         `json:"roomId"`
	ReplyToID *int        `json:"replyToId"`
	AuthorID  *int        `json:"authorId"`
	Body      string      `json:"body"`
	MsgType   MessageType `json:"msgType"`
	CreatedAt int64       `json:"createdAt"`
}

func (NewMessage) IsEventResult() {}

type NewRoom struct {
	ID       int     `json:"id"`
	ChatID   int     `json:"chatId"`
	Name     string  `json:"name"`
	ParentID *int    `json:"parentId"`
	Note     *string `json:"note"`
}

func (NewRoom) IsEventResult() {}

type Params struct {
	Limit  *int `json:"limit"`
	Offset *int `json:"offset"`
}

type PermissionHolders struct {
	Roles   *Roles   `json:"roles"`
	Chars   *Chars   `json:"chars"`
	Members *Members `json:"members"`
}

type PermissionHoldersSub struct {
	Roles   []int  `json:"roles"`
	Chars   *Chars `json:"chars"`
	Members []int  `json:"members"`
}

type RegisterInput struct {
	Domain   string `json:"domain"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Role struct {
	ID    int      `json:"id"`
	Name  string   `json:"name"`
	Color HexColor `json:"color"`
}

func (Role) IsRoleResult()     {}
func (Role) IsUserRoleResult() {}

type Roles struct {
	Roles []*Role `json:"roles"`
}

func (Roles) IsRolesResult()     {}
func (Roles) IsChatRolesResult() {}

type Room struct {
	RoomID   int            `json:"roomId"`
	Chat     *Chat          `json:"chat"`
	Name     string         `json:"name"`
	ParentID *int           `json:"parentId"`
	Note     *string        `json:"note"`
	Form     RoomFormResult `json:"form"`
	Allows   AllowsResult   `json:"allows"`
	Messages MessagesResult `json:"messages"`
}

func (Room) IsRoomResult() {}

type Rooms struct {
	Rooms []*Room `json:"rooms"`
}

func (Rooms) IsRoomsResult() {}

type StringValue struct {
	Value *string `json:"value"`
}

func (StringValue) IsUnionScalar() {}
func (StringValue) IsMsgBody()     {}

type StringValueInput struct {
	Value string `json:"value"`
}

type SubscriptionBody struct {
	Rev   int         `json:"rev"`
	Event EventType   `json:"event"`
	Body  EventResult `json:"body"`
}

type Successful struct {
	Success string `json:"success"`
}

func (Successful) IsMutationResult()          {}
func (Successful) IsJoinByInviteResult()      {}
func (Successful) IsJoinToChatResult()        {}
func (Successful) IsRegisterResult()          {}
func (Successful) IsSendMessageToRoomResult() {}

type TokenPair struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

func (TokenPair) IsLoginResult()         {}
func (TokenPair) IsRefreshTokensResult() {}

type Unit struct {
	ID     int      `json:"id"`
	Domain string   `json:"domain"`
	Name   string   `json:"name"`
	Type   UnitType `json:"type"`
}

func (Unit) IsUnitResult() {}

type Units struct {
	Units []*Unit `json:"units"`
}

func (Units) IsUnitsResult() {}

type UpdateAllows struct {
	RoomID int      `json:"roomId"`
	Allows []*Allow `json:"allows"`
}

func (UpdateAllows) IsEventResult() {}

type UpdateChat struct {
	ID      int    `json:"id"`
	Domain  string `json:"domain"`
	Name    string `json:"name"`
	Private bool   `json:"private"`
}

func (UpdateChat) IsEventResult() {}

type UpdateChatInput struct {
	Domain  *string `json:"domain"`
	Name    *string `json:"name"`
	Private *bool   `json:"private"`
}

type UpdateForm struct {
	RoomID int   `json:"roomId"`
	Form   *Form `json:"form"`
}

func (UpdateForm) IsEventResult() {}

type UpdateFormInput struct {
	Fields []*FormFieldInput `json:"fields"`
}

type UpdateInvites struct {
	ChatID  int      `json:"chatId"`
	Invites *Invites `json:"invites"`
}

func (UpdateInvites) IsEventResult() {}

type UpdateMeDataInput struct {
	Domain   *string `json:"domain"`
	Name     *string `json:"name"`
	Password *string `json:"password"`
	Email    *string `json:"email"`
}

type UpdateMember struct {
	ID     int      `json:"id"`
	RoleID *int     `json:"roleId"`
	Char   CharType `json:"char"`
	Muted  bool     `json:"muted"`
	Frozen bool     `json:"frozen"`
}

func (UpdateMember) IsEventResult() {}

type UpdateMemberInput struct {
	RoleID *int      `json:"roleId"`
	Char   *CharType `json:"char"`
	Muted  *bool     `json:"muted"`
	Frozen *bool     `json:"frozen"`
}

type UpdateRole struct {
	ID    int      `json:"id"`
	Name  string   `json:"name"`
	Color HexColor `json:"color"`
}

func (UpdateRole) IsEventResult() {}

type UpdateRoleInput struct {
	Name  *string   `json:"name"`
	Color *HexColor `json:"color"`
}

type UpdateRoom struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	ParentID *int    `json:"parentId"`
	Note     *string `json:"note"`
}

func (UpdateRoom) IsEventResult() {}

type UpdateRoomAllowsInput struct {
	Allows *AllowsInput `json:"allows"`
}

type UpdateRoomInput struct {
	Name     *string `json:"name"`
	ParentID *int    `json:"parentId"`
	Note     *string `json:"note"`
}

type UpdateUser struct {
	ID     int    `json:"id"`
	Domain string `json:"domain"`
	Name   string `json:"name"`
}

func (UpdateUser) IsEventResult() {}

type User struct {
	Unit *Unit `json:"unit"`
}

func (User) IsUserResult() {}

type UserChoice struct {
	Choice []*Case `json:"choice"`
}

func (UserChoice) IsMsgBody() {}

type UserData struct {
	Password string `json:"password"`
	Email    string `json:"email"`
}

type Users struct {
	Users []*User `json:"users"`
}

func (Users) IsUsersResult() {}

type ActionType string

const (
	ActionTypeRead  ActionType = "READ"
	ActionTypeWrite ActionType = "WRITE"
)

var AllActionType = []ActionType{
	ActionTypeRead,
	ActionTypeWrite,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeRead, ActionTypeWrite:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AllowAction string

const (
	AllowActionRead  AllowAction = "READ"
	AllowActionWrite AllowAction = "WRITE"
)

var AllAllowAction = []AllowAction{
	AllowActionRead,
	AllowActionWrite,
}

func (e AllowAction) IsValid() bool {
	switch e {
	case AllowActionRead, AllowActionWrite:
		return true
	}
	return false
}

func (e AllowAction) String() string {
	return string(e)
}

func (e *AllowAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllowAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllowAction", str)
	}
	return nil
}

func (e AllowAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AllowGroup string

const (
	AllowGroupChar   AllowGroup = "CHAR"
	AllowGroupRole   AllowGroup = "ROLE"
	AllowGroupMember AllowGroup = "MEMBER"
)

var AllAllowGroup = []AllowGroup{
	AllowGroupChar,
	AllowGroupRole,
	AllowGroupMember,
}

func (e AllowGroup) IsValid() bool {
	switch e {
	case AllowGroupChar, AllowGroupRole, AllowGroupMember:
		return true
	}
	return false
}

func (e AllowGroup) String() string {
	return string(e)
}

func (e *AllowGroup) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllowGroup(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllowGroup", str)
	}
	return nil
}

func (e AllowGroup) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CharType string

const (
	CharTypeAdmin CharType = "ADMIN"
	CharTypeModer CharType = "MODER"
	CharTypeNone  CharType = "NONE"
)

var AllCharType = []CharType{
	CharTypeAdmin,
	CharTypeModer,
	CharTypeNone,
}

func (e CharType) IsValid() bool {
	switch e {
	case CharTypeAdmin, CharTypeModer, CharTypeNone:
		return true
	}
	return false
}

func (e CharType) String() string {
	return string(e)
}

func (e *CharType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CharType", str)
	}
	return nil
}

func (e CharType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventSubjectAction string

const (
	EventSubjectActionCreate EventSubjectAction = "CREATE"
	EventSubjectActionUpdate EventSubjectAction = "UPDATE"
	EventSubjectActionDelete EventSubjectAction = "DELETE"
)

var AllEventSubjectAction = []EventSubjectAction{
	EventSubjectActionCreate,
	EventSubjectActionUpdate,
	EventSubjectActionDelete,
}

func (e EventSubjectAction) IsValid() bool {
	switch e {
	case EventSubjectActionCreate, EventSubjectActionUpdate, EventSubjectActionDelete:
		return true
	}
	return false
}

func (e EventSubjectAction) String() string {
	return string(e)
}

func (e *EventSubjectAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSubjectAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSubjectAction", str)
	}
	return nil
}

func (e EventSubjectAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventType string

const (
	EventTypeNewmessage    EventType = "NEWMESSAGE"
	EventTypeUpdateunit    EventType = "UPDATEUNIT"
	EventTypeUpdatemember  EventType = "UPDATEMEMBER"
	EventTypeUpdaterole    EventType = "UPDATEROLE"
	EventTypeUpdateroom    EventType = "UPDATEROOM"
	EventTypeUpdateform    EventType = "UPDATEFORM"
	EventTypeUpdateallows  EventType = "UPDATEALLOWS"
	EventTypeUpdateinvites EventType = "UPDATEINVITES"
	EventTypeUpdatechat    EventType = "UPDATECHAT"
	EventTypeNewroom       EventType = "NEWROOM"
)

var AllEventType = []EventType{
	EventTypeNewmessage,
	EventTypeUpdateunit,
	EventTypeUpdatemember,
	EventTypeUpdaterole,
	EventTypeUpdateroom,
	EventTypeUpdateform,
	EventTypeUpdateallows,
	EventTypeUpdateinvites,
	EventTypeUpdatechat,
	EventTypeNewroom,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeNewmessage, EventTypeUpdateunit, EventTypeUpdatemember, EventTypeUpdaterole, EventTypeUpdateroom, EventTypeUpdateform, EventTypeUpdateallows, EventTypeUpdateinvites, EventTypeUpdatechat, EventTypeNewroom:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FetchType string

const (
	FetchTypePositive FetchType = "POSITIVE"
	FetchTypeNeutral  FetchType = "NEUTRAL"
	FetchTypeNegative FetchType = "NEGATIVE"
)

var AllFetchType = []FetchType{
	FetchTypePositive,
	FetchTypeNeutral,
	FetchTypeNegative,
}

func (e FetchType) IsValid() bool {
	switch e {
	case FetchTypePositive, FetchTypeNeutral, FetchTypeNegative:
		return true
	}
	return false
}

func (e FetchType) String() string {
	return string(e)
}

func (e *FetchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FetchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FetchType", str)
	}
	return nil
}

func (e FetchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FieldType string

const (
	FieldTypeEmail   FieldType = "EMAIL"
	FieldTypeDate    FieldType = "DATE"
	FieldTypeLink    FieldType = "LINK"
	FieldTypeText    FieldType = "TEXT"
	FieldTypeNumeric FieldType = "NUMERIC"
)

var AllFieldType = []FieldType{
	FieldTypeEmail,
	FieldTypeDate,
	FieldTypeLink,
	FieldTypeText,
	FieldTypeNumeric,
}

func (e FieldType) IsValid() bool {
	switch e {
	case FieldTypeEmail, FieldTypeDate, FieldTypeLink, FieldTypeText, FieldTypeNumeric:
		return true
	}
	return false
}

func (e FieldType) String() string {
	return string(e)
}

func (e *FieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FieldType", str)
	}
	return nil
}

func (e FieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupType string

const (
	GroupTypeRole   GroupType = "ROLE"
	GroupTypeChar   GroupType = "CHAR"
	GroupTypeMember GroupType = "MEMBER"
)

var AllGroupType = []GroupType{
	GroupTypeRole,
	GroupTypeChar,
	GroupTypeMember,
}

func (e GroupType) IsValid() bool {
	switch e {
	case GroupTypeRole, GroupTypeChar, GroupTypeMember:
		return true
	}
	return false
}

func (e GroupType) String() string {
	return string(e)
}

func (e *GroupType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroupType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupType", str)
	}
	return nil
}

func (e GroupType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageType string

const (
	MessageTypeSystem    MessageType = "SYSTEM"
	MessageTypeUser      MessageType = "USER"
	MessageTypeFormatted MessageType = "FORMATTED"
)

var AllMessageType = []MessageType{
	MessageTypeSystem,
	MessageTypeUser,
	MessageTypeFormatted,
}

func (e MessageType) IsValid() bool {
	switch e {
	case MessageTypeSystem, MessageTypeUser, MessageTypeFormatted:
		return true
	}
	return false
}

func (e MessageType) String() string {
	return string(e)
}

func (e *MessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageType", str)
	}
	return nil
}

func (e MessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ModifyType string

const (
	ModifyTypeAdd    ModifyType = "ADD"
	ModifyTypeReduce ModifyType = "REDUCE"
)

var AllModifyType = []ModifyType{
	ModifyTypeAdd,
	ModifyTypeReduce,
}

func (e ModifyType) IsValid() bool {
	switch e {
	case ModifyTypeAdd, ModifyTypeReduce:
		return true
	}
	return false
}

func (e ModifyType) String() string {
	return string(e)
}

func (e *ModifyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModifyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModifyType", str)
	}
	return nil
}

func (e ModifyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UnitType string

const (
	UnitTypeChat UnitType = "CHAT"
	UnitTypeUser UnitType = "USER"
)

var AllUnitType = []UnitType{
	UnitTypeChat,
	UnitTypeUser,
}

func (e UnitType) IsValid() bool {
	switch e {
	case UnitTypeChat, UnitTypeUser:
		return true
	}
	return false
}

func (e UnitType) String() string {
	return string(e)
}

func (e *UnitType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitType", str)
	}
	return nil
}

func (e UnitType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
