enum UnitType {
    CHAT
    USER
}
enum FieldType {
    EMAIL
    DATE
    LINK
    TEXT
    NUMERIC
}
enum MessageType {
    SYSTEM
    USER
    FORMATTED
}
enum FetchType {
    POSITIVE
    NEUTRAL
    NEGATIVE
}
enum CharType {
    ADMIN
    MODER
}
enum ActionType {
    READ
    WRITE
}
enum GroupType {
    ROLE
    CHAR
    MEMBER
}
enum EventSubjectAction {
    ADD
    DELETE
}
enum AllowAction {
    READ
    WRITE
}
enum AllowGroup {
    CHAR
    ROLE
    MEMBER
}
type Chars {
    chars: [CharType!]
}

input Params {
    limit: Int
    offset: Int
}

type TokenPair {
    accessToken: String!
    refreshToken: String!
}

type Unit {
    id: ID!
    domain: String!
    name: String!
    type: UnitType!
}

type Units {
    units: [Unit!]
}

type Chat {
    unit: Unit!
    owner: UserResult! @goField(forceResolver: true)
    rooms: RoomsResult @goField(forceResolver: true)
    private: Boolean!
    countMembers: Int!
    members: MembersResult! @goField(forceResolver: true)
    roles: RolesResult! @goField(forceResolver: true)
    invites: InvitesResult! @goField(forceResolver: true)
    banlist: UsersResult! @goField(forceResolver: true)
    me: MemberResult! @goField(forceResolver: true)
}
type Chats {
    chats: [Chat!]
}

type Room {
    roomID: ID!
    chat: Chat! @goField(forceResolver: true)
    name: String!
    parentId: ID
    note: String
    form: RoomFormResult @goField(forceResolver: true) # не проверено
    allows: AllowsResult! @goField(forceResolver: true)
    messages(find: FindMessagesInRoom!): MessagesResult! @goField(forceResolver: true)
    #todo next: prev: or symbolindex:
}


type Rooms {
    rooms: [Room!]
}

type Form {
    fields: [FormField!]!
}

type FormField {
    key: String!
    type: FieldType!
    optional: Boolean!
    length: Int
    items: [String!]
}

type Member {
    id: ID!
    chat: Chat! @goField(forceResolver: true)
    user: User!
    role: RoleResult @goField(forceResolver: true)
    char: CharType
    joinedAt: Int64!
    muted: Boolean!
}

type Members {
    members: [Member!]
}

type Role {
    id: ID!
    name: String!
    color: HexColor!
}

type Roles {
    roles: [Role!]
}

type Message {
    id: ID!
    room: Room! @goField(forceResolver: true)
    replyTo: Message @goField(forceResolver: true)
    user: User @goField(forceResolver: true)
    body: String!
    type: MessageType!
    createdAt: Int64!
}

type Messages {
    messages: [Message!]
}

type Invite {
    code: String!
    aliens: Int
    expiresAt: Int64
}

type Invites {
    invites: [Invite!]
}

type InviteInfo {
    unit: Unit!
    private: Boolean!
    countMembers: Int!
}
type User {
    unit: Unit!
}

type Users {
    users: [User!]
}

type Allows {
    room: Room! # 04.12 1:55 todo
    allows: [Allow]!
}

type PermissionHoldersSub {
    roles: [ID!]
    chars: Chars!
    members: [ID!]
}
type UserData {
    email: String!
}
type Me {
    user: User!
    data: UserData!
    chats: Chats! @goField(forceResolver: true)
    ownedChats: Chats! @goField(forceResolver: true)
}

# using internal code
type Case {
    key: String!
    value: String!
}
type UserChoice {
    choice: [Case!]
}
# end

type Allow {
    id: ID!
    action: AllowAction!
    group: AllowGroup!
    value: String!
}

type ListenCollection {
    sessionKey: String!
    success: String!
    collection: [ListenedChat!]! @goField(forceResolver: true)
}

type ListenedChat {
    id: ID!
    events: [EventType!]!
}