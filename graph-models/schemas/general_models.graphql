enum UnitType {
    CHAT
    USER
}
enum FieldType {
    EMAIL
    DATE
    LINK
    TEXT
    NUMERIC
    SELECTOR
}
enum MessageType {
    SYSTEM
    USER
    FORMATTED
}
enum Char {
    ADMIN
    MODER
    NONE
}
type Chars {
    chars: [Char!]
}

# Union type be like
type IntValue {
    value: Int
}
# end


input Params {
    limit: Int = 20
    offset: Int = 0
}

type TokenPair {
    access_token: String!
    refresh_token: String!
}

type Unit {
    id: ID!
    domain: String!
    name: String!
    type: UnitType!
}

type Chat {
    unit: Unit!
    owner: UserResult! @goField(forceResolver: true)
    rooms: RoomsResult @goField(forceResolver: true)
    private: Boolean!
    count_members: CountMembersResult! @goField(forceResolver: true)
    members: MembersResult @goField(forceResolver: true)
    roles: RolesResult @goField(forceResolver: true)
    invites: InvitesResult @goField(forceResolver: true)
    banlist: UsersResult @goField(forceResolver: true)
    me: MemberResult! @goField(forceResolver: true)
}

type Room {
    id: ID!
    chat: Chat! # @goField(forceResolver: true)
    name: String!
    parentId: ID
    note: String
    msg_format: Form @goField(forceResolver: true) # не проверено
    allows: AllowsResult! @goField(forceResolver: true)
    messages: [Message!] @goField(forceResolver: true)
}

type Rooms {
    rooms: [Room!]
}

type Form {
    fields: [FormField!]!
}

type FormField {
    key: String!
    type: FieldType!
    optional: Boolean!
    length: Int
    items: [String!]
}

type Member {
    chat: Chat! # @goField(forceResolver: true) # зач тут чат?
    user: User! # @goField(forceResolver: true)
    role: RoleResult @goField(forceResolver: true)
    char: Char
    joined_at: Int64!
    muted: Boolean!
    frozen: Boolean!
}

type Members {
    members: [Member!]
}

type Role {
    id: ID!
    name: String!
    color: String!
}

type Roles {
    roles: [Role!]
}

type Message {
    id: ID!
    room: Room! @goField(forceResolver: true)
    reply_to: Message @goField(forceResolver: true)
    author: Unit! @goField(forceResolver: true)
    body: String!
    type: MessageType!
    date: Int!
}

type Invite {
    code: String!
    aliens: Int
    expires_at: Int64
}

type Invites {
    invites: [Invite!]
}

type InviteInfo {
    unit: Unit!
    private: Boolean!
    count_members: CountMembersResult! @goField(forceResolver: true)
}
type User {
    unit: Unit!
}

type Users {
    users: [User!]
}

type Allows {
    room: Room! # 04.12 1:55 todo
    allow_read: PermissionHolders
    allow_write: PermissionHolders
}
type PermissionHolders {
    roles: Roles # @goField(forceResolver: true)
    chars: Chars # @goField(forceResolver: true)
    members: Members # @goField(forceResolver: true)
}

input FindByDomainOrID {
    id: Int
    domain: String
}