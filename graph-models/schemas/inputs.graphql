input CreateChatInput {
    domain: String!
    name: String!
    private: Boolean!
}
input CreateInviteInput {
    chatID: ID!
#    code: String!
    aliens: Int
    duration: Int64
}
input CreateRoleInput {
    chatID: ID!
    name: String!
    color: HexColor!
}
input LoginInput {
    email: String!
    password: String!
}
input RegisterInput {
    domain: String!
    name: String!
    email: String!
    password: String!
}
input CreateMessageInput {
    replyTo: ID
    body: String!
}
input StringValueInput {
    value: String!
}
input BoolValueInput {
    value: Boolean!
}
input UpdateChatInput {
    domain: String
    name: String
    private: Boolean
}

input UpdateMeDataInput  {
    domain: String
    name: String
    password: String
    email: String
}

input UpdateRoleInput {
    name: String
    color: HexColor
}

input UpdateRoomInput {
    name: String
    parentId: ID
    note: String
}
input UpdateFormInput {
    fields: [FormFieldInput!]!
}
input FormFieldInput {
    key: String!
    type: FieldType!
    optional: Boolean!
    length: Int
    items: [String!]
}

input FindMembers {
    chatID: ID!
    userID: ID
    memberID: ID
    char: CharType
    roleID: ID
    muted: Boolean
}

# возвращает в обратном хронологическом порядке
input FindMessages {
    chatID: ID!
    roomID: ID
    userID: ID
    textFragment: String
}

# возвращает в обратном хронологическом порядке
# если равно 0 то началом будет считаться самое новое сообщение
input FindMessagesInRoom {
    startMessageId: ID!
    created: MessagesCreated!
    count: Int!
}
enum MessagesCreated {
    BEFORE
    AFTER
}

input FindRooms {
    chatID: ID!
    roomID: ID
    nameFragment: String
    parentId: ID
    isChild: FetchType = NEUTRAL
}

input FindUnits {
    id: ID
    domain: String
    nameFragment: String
    unitType: UnitType
}


input FindUsers {
    id: ID
    domain: String
    nameFragment: String
}

input FindChats {
    id: ID
    domain: String
    nameFragment: String
#    isPrivate: FetchType = NEUTRAL unable to find a private chat!!!

}

input CreateRoomInput {
    chatID: ID!
    name: String!
    parent: ID
    note: String
    form: UpdateFormInput
    allows: AllowsInput
}

input AllowsInput {
    allows: [AllowInput!]!
}

input AllowInput {
    action: AllowAction!
    group: AllowGroup!
    value: String!
}


input UpdateMemberInput {
    roleID: ID
    char: CharType
    muted: Boolean
}









